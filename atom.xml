<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Head in the Cloud]]></title>
  <link href="http://christinachang.github.com/atom.xml" rel="self"/>
  <link href="http://christinachang.github.com/"/>
  <updated>2013-04-03T09:41:59-04:00</updated>
  <id>http://christinachang.github.com/</id>
  <author>
    <name><![CDATA[Christina Chang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Getting Git]]></title>
    <link href="http://christinachang.github.com/blog/2013/04/02/getting-git/"/>
    <updated>2013-04-02T20:09:00-04:00</updated>
    <id>http://christinachang.github.com/blog/2013/04/02/getting-git</id>
    <content type="html"><![CDATA[<p>Since working on our group project a couple of weeks ago, I&#8217;ve gotten more familiar with using Git. After suffering through some painful merging of branches into master, I have learned some important lessons of what to do (e.g., make sure your local master is up to date before rebasing and merging branches!) and what <em>not</em> to do (e.g., panic and type arbitrary git commands during a rebase!)</p>

<p>Here are 10 steps for Git success (for branching and merging):</p>

<p>1) Before branching, make sure your local master is up to date with remote master.</p>

<p>  <code>git pull origin master</code></p>

<p>2) Create and check out a new branch.</p>

<p>  <code>git checkout -b [NAME_OF_FEATURE_BRANCH]</code></p>

<p>3) Do all your work on this branch. Once your branch is complete, commit all of your changes and push them to the branch.</p>

<p>  <code>git commit -am "helpful commit message!"</code></p>

<p>4) Check out master and make sure that your local master is up to date with the latest changes on master.</p>

<p>  <code>git pull origin master</code></p>

<p>5) Check out your feature branch.</p>

<p>  <code>git co [FEATURE_BRANCH]</code></p>

<p>6) From your feature branch, rebase master onto the feature branch.</p>

<p>  <code>git rebase master</code></p>

<p>7) Resolve all conflicts on the feature branch. After resolving conflicts in your files, add your changes and continue the rebase.</p>

<p>  <code>git add . </code><br>
  <code>git rebase --continue</code></p>

<p>8) Once the rebase is complete, check out master.</p>

<p>  <code>git co master</code></p>

<p>9) Merge feature branch into master.</p>

<p>  <code>git merge [FEATURE_BRANCH]</code></p>

<p>10) Double check that all conflicts have been resolved and that your code is working properly. If everything looks good, push the merge to remote master.</p>

<p>  <code>git push origin master</code></p>

<p>Some additional thoughts on good practices:<br>
- Keep remote master clean. Write any new code on branches.<br>
- Don&#8217;t branch off a feature branch. You should generally branch off master.<br>
- Don&#8217;t merge a branch into master until the feature is fully complete.<br>
- Keep your changes small so that you don&#8217;t spend too much time working on the same branch.<br>
- Write succinct but descriptive commit messages.<br>
- Once your branch is complete and merged, any new work should be done on a new branch.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Equal Operators: The Case of Mistaken Identity in JS]]></title>
    <link href="http://christinachang.github.com/blog/2013/03/17/equal-operators/"/>
    <updated>2013-03-17T18:35:00-04:00</updated>
    <id>http://christinachang.github.com/blog/2013/03/17/equal-operators</id>
    <content type="html"><![CDATA[<p>A little tidbit I learned about Javascript and the equal operator:</p>

<p>&#8217;=&#8217; denotes assignment.</p>

<p>Example: var x = 10;</p>

<p>&#8217;==&#8217; compares two values and returns a boolean (true or false).</p>

<p>Example: 10 == &#8216;10&#8217; // returns true</p>

<p>&#8217;===&#8217; compares both the values AND the type of the data.</p>

<p>Example: 10 === &#8216;10&#8217; // returns false</p>

<p>It&#8217;s important to know which operator to use to get the results you expect!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Who You Callin' a Foo?!]]></title>
    <link href="http://christinachang.github.com/blog/2013/03/05/who-you-callin-a-foo/"/>
    <updated>2013-03-05T19:46:00-05:00</updated>
    <id>http://christinachang.github.com/blog/2013/03/05/who-you-callin-a-foo</id>
    <content type="html"><![CDATA[<h3>Searching for the Origins of &#8220;foobar&#8221;</h3>


<p>While reading programming books and online resources, I often come across the all-purpose placeholder terms &#8220;foo&#8221;, &#8220;bar&#8221;, and &#8220;baz&#8221; in code examples. For the non-programmers out there, these terms are used to name entities such as variables, functions, and commands in order to demonstrate a concept.</p>

<p>I was curious about the origins of these terms and did some investigative research (i.e. looked it up on <a href="http://en.wikipedia.org/wiki/Foobar" target="_blank">Wikipedia</a>). What I found was pretty interesting.</p>

<p><em>Foo</em> first originated as a nonsense word in the 1930s when it appeared in a comic called Smokey Stover by Bill Holman who stated that he used the word after seeing it on the bottom of a jade figurine in Chinatown, San Francisco. The Chinese word transliterated as &#8220;fu&#8221; means good luck.</p>

<p>The term then evolved into military slang in the 1940s, merging with the term FUBAR, which stands for &#8220;F**ked Up Beyond All Repair.&#8221; During WWII, the term &#8216;foo fighters&#8217; was used to describe UFOs (so <em>that&#8217;s</em> where the Foo Fighters got its name!).</p>

<p>The use of <em>foo</em> in a programming context may have begun in the 1960s by the Tech Model Railroad Club (TMRC), a student organization that built model trains and systems. The term <em>foobar</em> first appeared in system manuals by Digital Equipment Corporation in the 1960s and early 1970s.</p>

<p>The exact relationships between foo, FUBAR, and foo/bar in a programming context are not known with certainty but anecdotal theories abound. You can learn more about the etymology of <em>foo</em> in the Internet Engineering Task Force (IETF) <a href="http://www.faqs.org/rfcs/rfc3092.html" target="_blank">RFC 3092</a>. It&#8217;s pretty interesting reading.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting a Default Version of Ruby]]></title>
    <link href="http://christinachang.github.com/blog/2013/03/03/rvm-versions-of-ruby/"/>
    <updated>2013-03-03T17:09:00-05:00</updated>
    <id>http://christinachang.github.com/blog/2013/03/03/rvm-versions-of-ruby</id>
    <content type="html"><![CDATA[<p>Have you ever experienced the problem of using your Terminal to run some Ruby code only to realize that you&#8217;re not using the version of Ruby that you want? And although you have the latest version installed, Terminal somehow keeps mysteriously reverting to a different version?</p>

<p>I came across this issue a couple of weeks ago and learned that it&#8217;s good practice to explicitly set a default version of Ruby to avoid unexpected results. This is where the Ruby Version Manager (RVM), a tool for installing and managing several different versions and implementations of Ruby on one computer, comes in really handy.</p>

<p>Once you have <a href="https://rvm.io/rvm/install/">RVM installed</a>, go into your terminal and type &#8220;rvm list&#8221; to see all the versions of Ruby that are installed on your computer.</p>

<p>The output also tells you what version you&#8217;re currently using and what the default version is if there is one set.</p>

<p><img src="http://christinachang.github.com/images/rvm_list.png"></p>

<p>To set a specific version of Ruby, say the latest version (currently 1.9.3-p374), as your default, type:</p>

<p><code>rvm use ruby-1.9.3-p374 --default</code></p>

<p>You can always change the current version that you&#8217;re using or the default by repeating these steps.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Scrape and Email Recipes from Epicurious.com]]></title>
    <link href="http://christinachang.github.com/blog/2013/02/23/recipe-scraper/"/>
    <updated>2013-02-23T17:16:00-05:00</updated>
    <id>http://christinachang.github.com/blog/2013/02/23/recipe-scraper</id>
    <content type="html"><![CDATA[<p>Last week, I presented at the <a href="http://www.meetup.com/nyc-on-rails/events/105048012/">NYC on Rails Meetup</a> on the topic of data/messaging mashups. A common mashup pattern combines a data source with a messaging service (Twitter, e-mail, etc). For the presentation, I wrote a script that scrapes and emails the recipe of the day from Epicurious.com. This post summarizes the steps of how I did it.</p>

<h2>Basic Steps</h2>




<h4>Download Gems and APIs</h4>


<p>To get the content of the recipes, I used the <a href="http://nokogiri.org/">Nokogiri</a> gem which allows you to parse HTML by searching documents via CSS selectors. To send the recipe in an email, I used the <a href="https://postmarkapp.com/">Postmark</a> API. The &#8220;open-uri&#8221; library is also required to open up links.</p>

<h4>Identify the CSS selector for &#8220;Recipe of the Day&#8221; element</h4>


<p>Using the inspect tool in my browser, I found the appropriate CSS selector and HTML node path that corresponds to the link to the Recipe of the Day. To get the actual link of the recipe, I needed the HREF attribute of the &#8220;a&#8221; tag. Since that is a relative path to the recipe page, I needed to concatenate the homepage url (www.epicurious.com) with the relative path (/recipes/food/views/51143030).</p>

<p><img src="http://christinachang.github.com/images/recipe scraper images/recipe_of_day_link.png"></p>

<h4>Parse HTML from Recipe Page</h4>


<p>The basic structure of each recipe page is the same. I only wanted the most important components of the recipe - the name, image, yield, ingredients, and preparation instructions - to be included in the email. Similar to the above step, I used the inspector tool to identify the corresponding node and CSS selector for each recipe component.</p>

<p>An important thing to note is that the CSS method returns an array of XML element objects (see image below) and not just the text itself. I used the &#8220;text&#8221; method to convert these elements into human readable format.
<img src="http://christinachang.github.com/images/recipe scraper images/ingredients.png"></p>

<h4>Create HTML String Variable for Email Body</h4>


<p>After gathering all the relevant components of the recipe page, I used HTML syntax to describe the structure of the email body. To marry the email structure with the actual recipe content, I created a (rather large) HTML string variable as shown below.</p>

<pre><code>self.content = "&lt;h2&gt;" + recipe_name + "&lt;/h2&gt;"
self.content += "&lt;img src=" + recipe_image + "&gt;&lt;br&gt;"
self.content += "&lt;br&gt;&lt;a href='#{url}' target='_blank'&gt;" + recipe_url + "&lt;/a&gt;"
self.content += "&lt;br&gt;&lt;h3&gt;Yield: &lt;/h3&gt;&lt;p&gt;" + recipe_servings + "&lt;/p&gt;"
self.content += "&lt;h3&gt;Ingredients:&lt;/h3&gt;"
self.content += "&lt;ul&gt;"

ingredients.each do |ingredient|
  self.content += "&lt;li&gt;" + ingredient.to_s + "&lt;/li&gt;"
end

self.content += "&lt;/ul&gt;"
self.content += "&lt;h3&gt;Preparation:&lt;/h3&gt;"

instructions.each do |instruction|
  self.content += "&lt;p&gt;" + instruction.to_s + "&lt;/p&gt;"
end
</code></pre>

<p>My full code can be accessed <a href="https://github.com/christinachang/recipe_scraper">here.</a></p>

<p>While writing this script, I found the following resources extremely helpful:</p>

<ul><strong>HTML Parsing</strong>
<li><a href="http://ruby.bastardsbook.com/chapters/html-parsing/">http://ruby.bastardsbook.com/chapters/html-parsing/</a></li>
</ul>




<ul><strong>CSS Selectors</strong>
<li><a href="http://www.w3schools.com/cssref/css_selectors.asp">http://www.w3schools.com/cssref/css_selectors.asp</a></li>
</ul>


<p>Happy Cooking!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why I'm Learning to Code]]></title>
    <link href="http://christinachang.github.com/blog/2013/02/05/hello-world/"/>
    <updated>2013-02-05T18:17:00-05:00</updated>
    <id>http://christinachang.github.com/blog/2013/02/05/hello-world</id>
    <content type="html"><![CDATA[<p>Up until recently, my experience with technology has primarily been as a consumer and end user. Whenever I interact with a beautifully designed website or a user friendly application, it would fill me with awe and wonder. &#8220;How was this made? How does it do what it does? It must be magic!&#8221;</p>

<p>I also often think, &#8220;It would be great if there was an app that could do x, y or z,&#8221; or &#8220;This tool would be so much easier to use if&#8230; blah blah blah.&#8221;</p>

<p>Those thoughts and ideas eventually evolved into the desire to take the initiative to learn to build products myself. And that has led me to The Flatiron School where I am today, learning to code and demystifying the magical powers of the Internet and technology. My goal for the next three months is to learn as much as I can and go on to help create something that will make a positive difference in the world.</p>
]]></content>
  </entry>
  
</feed>
